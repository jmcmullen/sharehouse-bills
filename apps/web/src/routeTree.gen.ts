/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as TodosRouteImport } from './routes/todos'
import { Route as TestWebhookRouteImport } from './routes/test-webhook'
import { Route as LoginRouteImport } from './routes/login'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as AiRouteImport } from './routes/ai'
import { Route as IndexRouteImport } from './routes/index'
import { ServerRoute as ApiEmailWebhookServerRouteImport } from './routes/api.email-webhook'
import { ServerRoute as ApiAiServerRouteImport } from './routes/api.ai'
import { ServerRoute as ApiSplatServerRouteImport } from './routes/api.$'
import { ServerRoute as ApiRpcSplatServerRouteImport } from './routes/api.rpc.$'
import { ServerRoute as ApiAuthSplatServerRouteImport } from './routes/api.auth.$'

const rootServerRouteImport = createServerRootRoute()

const TodosRoute = TodosRouteImport.update({
  id: '/todos',
  path: '/todos',
  getParentRoute: () => rootRouteImport,
} as any)
const TestWebhookRoute = TestWebhookRouteImport.update({
  id: '/test-webhook',
  path: '/test-webhook',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const AiRoute = AiRouteImport.update({
  id: '/ai',
  path: '/ai',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiEmailWebhookServerRoute = ApiEmailWebhookServerRouteImport.update({
  id: '/api/email-webhook',
  path: '/api/email-webhook',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiAiServerRoute = ApiAiServerRouteImport.update({
  id: '/api/ai',
  path: '/api/ai',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiSplatServerRoute = ApiSplatServerRouteImport.update({
  id: '/api/$',
  path: '/api/$',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiRpcSplatServerRoute = ApiRpcSplatServerRouteImport.update({
  id: '/api/rpc/$',
  path: '/api/rpc/$',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/ai': typeof AiRoute
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/test-webhook': typeof TestWebhookRoute
  '/todos': typeof TodosRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/ai': typeof AiRoute
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/test-webhook': typeof TestWebhookRoute
  '/todos': typeof TodosRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/ai': typeof AiRoute
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/test-webhook': typeof TestWebhookRoute
  '/todos': typeof TodosRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/ai' | '/dashboard' | '/login' | '/test-webhook' | '/todos'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/ai' | '/dashboard' | '/login' | '/test-webhook' | '/todos'
  id:
    | '__root__'
    | '/'
    | '/ai'
    | '/dashboard'
    | '/login'
    | '/test-webhook'
    | '/todos'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AiRoute: typeof AiRoute
  DashboardRoute: typeof DashboardRoute
  LoginRoute: typeof LoginRoute
  TestWebhookRoute: typeof TestWebhookRoute
  TodosRoute: typeof TodosRoute
}
export interface FileServerRoutesByFullPath {
  '/api/$': typeof ApiSplatServerRoute
  '/api/ai': typeof ApiAiServerRoute
  '/api/email-webhook': typeof ApiEmailWebhookServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/rpc/$': typeof ApiRpcSplatServerRoute
}
export interface FileServerRoutesByTo {
  '/api/$': typeof ApiSplatServerRoute
  '/api/ai': typeof ApiAiServerRoute
  '/api/email-webhook': typeof ApiEmailWebhookServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/rpc/$': typeof ApiRpcSplatServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/$': typeof ApiSplatServerRoute
  '/api/ai': typeof ApiAiServerRoute
  '/api/email-webhook': typeof ApiEmailWebhookServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/rpc/$': typeof ApiRpcSplatServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths:
    | '/api/$'
    | '/api/ai'
    | '/api/email-webhook'
    | '/api/auth/$'
    | '/api/rpc/$'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/$' | '/api/ai' | '/api/email-webhook' | '/api/auth/$' | '/api/rpc/$'
  id:
    | '__root__'
    | '/api/$'
    | '/api/ai'
    | '/api/email-webhook'
    | '/api/auth/$'
    | '/api/rpc/$'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiSplatServerRoute: typeof ApiSplatServerRoute
  ApiAiServerRoute: typeof ApiAiServerRoute
  ApiEmailWebhookServerRoute: typeof ApiEmailWebhookServerRoute
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute
  ApiRpcSplatServerRoute: typeof ApiRpcSplatServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/todos': {
      id: '/todos'
      path: '/todos'
      fullPath: '/todos'
      preLoaderRoute: typeof TodosRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/test-webhook': {
      id: '/test-webhook'
      path: '/test-webhook'
      fullPath: '/test-webhook'
      preLoaderRoute: typeof TestWebhookRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/ai': {
      id: '/ai'
      path: '/ai'
      fullPath: '/ai'
      preLoaderRoute: typeof AiRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/email-webhook': {
      id: '/api/email-webhook'
      path: '/api/email-webhook'
      fullPath: '/api/email-webhook'
      preLoaderRoute: typeof ApiEmailWebhookServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/ai': {
      id: '/api/ai'
      path: '/api/ai'
      fullPath: '/api/ai'
      preLoaderRoute: typeof ApiAiServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/$': {
      id: '/api/$'
      path: '/api/$'
      fullPath: '/api/$'
      preLoaderRoute: typeof ApiSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/rpc/$': {
      id: '/api/rpc/$'
      path: '/api/rpc/$'
      fullPath: '/api/rpc/$'
      preLoaderRoute: typeof ApiRpcSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AiRoute: AiRoute,
  DashboardRoute: DashboardRoute,
  LoginRoute: LoginRoute,
  TestWebhookRoute: TestWebhookRoute,
  TodosRoute: TodosRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiSplatServerRoute: ApiSplatServerRoute,
  ApiAiServerRoute: ApiAiServerRoute,
  ApiEmailWebhookServerRoute: ApiEmailWebhookServerRoute,
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
  ApiRpcSplatServerRoute: ApiRpcSplatServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
